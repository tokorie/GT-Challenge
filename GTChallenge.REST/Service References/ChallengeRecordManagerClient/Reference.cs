//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.ServiceModel.Channels;
using System.Threading;

namespace GTChallenge.REST.ChallengeRecordManagerClient
{
      [DebuggerStepThrough()]
      [GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
      [DataContract(Name = "RecordItem", Namespace = "http://schemas.datacontract.org/2004/07/GTChallenge.Code")]
      [Serializable()]
      public partial class RecordItem : object, IExtensibleDataObject, INotifyPropertyChanged
      {
            [OptionalField()] private string DateofbirthField;

            [NonSerialized()] private ExtensionDataObject extensionDataField;

            [OptionalField()] private string FavoriteField;

            [OptionalField()] private string FirstnameField;

            [OptionalField()] private string GenderField;

            [OptionalField()] private string LastnameField;

            [DataMember()]
            public string Dateofbirth
            {
                  get { return this.DateofbirthField; }
                  set
                  {
                        if ((ReferenceEquals(this.DateofbirthField, value) != true))
                        {
                              this.DateofbirthField = value;
                              this.RaisePropertyChanged("Dateofbirth");
                        }
                  }
            }

            [DataMember()]
            public string Favorite
            {
                  get { return this.FavoriteField; }
                  set
                  {
                        if ((ReferenceEquals(this.FavoriteField, value) != true))
                        {
                              this.FavoriteField = value;
                              this.RaisePropertyChanged("Favorite");
                        }
                  }
            }

            [DataMember()]
            public string Firstname
            {
                  get { return this.FirstnameField; }
                  set
                  {
                        if ((ReferenceEquals(this.FirstnameField, value) != true))
                        {
                              this.FirstnameField = value;
                              this.RaisePropertyChanged("Firstname");
                        }
                  }
            }

            [DataMember()]
            public string Gender
            {
                  get { return this.GenderField; }
                  set
                  {
                        if ((ReferenceEquals(this.GenderField, value) != true))
                        {
                              this.GenderField = value;
                              this.RaisePropertyChanged("Gender");
                        }
                  }
            }

            [DataMember()]
            public string Lastname
            {
                  get { return this.LastnameField; }
                  set
                  {
                        if ((ReferenceEquals(this.LastnameField, value) != true))
                        {
                              this.LastnameField = value;
                              this.RaisePropertyChanged("Lastname");
                        }
                  }
            }

            [Browsable(false)]
            public ExtensionDataObject ExtensionData
            {
                  get { return this.extensionDataField; }
                  set { this.extensionDataField = value; }
            }

            public event PropertyChangedEventHandler PropertyChanged;

            protected void RaisePropertyChanged(string propertyName)
            {
                  var propertyChanged = this.PropertyChanged;
                  if ((propertyChanged != null))
                  {
                        propertyChanged(this, new PropertyChangedEventArgs(propertyName));
                  }
            }
      }

      [GeneratedCode("System.ServiceModel", "4.0.0.0")]
      [ServiceContract(ConfigurationName = "ChallengeRecordManagerClient.IChallengeRecordsManager")]
      public interface IChallengeRecordsManager
      {
            [OperationContract(Action = "http://tempuri.org/IChallengeRecordsManager/GetRecords",
                   ReplyAction = "http://tempuri.org/IChallengeRecordsManager/GetRecordsResponse")]
            RecordItem[] GetRecords();

            [OperationContract(AsyncPattern = true, Action = "http://tempuri.org/IChallengeRecordsManager/GetRecords",
                   ReplyAction = "http://tempuri.org/IChallengeRecordsManager/GetRecordsResponse")]
            IAsyncResult BeginGetRecords(AsyncCallback callback, object asyncState);

            RecordItem[] EndGetRecords(IAsyncResult result);

            [OperationContract(Action = "http://tempuri.org/IChallengeRecordsManager/AppendRecord",
                   ReplyAction = "http://tempuri.org/IChallengeRecordsManager/AppendRecordResponse")]
            bool AppendRecord(string dataline);

            [OperationContract(AsyncPattern = true, Action = "http://tempuri.org/IChallengeRecordsManager/AppendRecord",
                   ReplyAction = "http://tempuri.org/IChallengeRecordsManager/AppendRecordResponse")]
            IAsyncResult BeginAppendRecord(string dataline, AsyncCallback callback, object asyncState);

            bool EndAppendRecord(IAsyncResult result);
      }

      [GeneratedCode("System.ServiceModel", "4.0.0.0")]
      public interface IChallengeRecordsManagerChannel : IChallengeRecordsManager, IClientChannel
      {
      }

      [DebuggerStepThrough()]
      [GeneratedCode("System.ServiceModel", "4.0.0.0")]
      public partial class GetRecordsCompletedEventArgs : AsyncCompletedEventArgs
      {
            private object[] results;

            public GetRecordsCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
                  :
                  base(exception, cancelled, userState)
            {
                  this.results = results;
            }

            public RecordItem[] Result
            {
                  get
                  {
                        base.RaiseExceptionIfNecessary();
                        return ((RecordItem[]) (this.results[0]));
                  }
            }
      }

      [DebuggerStepThrough()]
      [GeneratedCode("System.ServiceModel", "4.0.0.0")]
      public partial class AppendRecordCompletedEventArgs : AsyncCompletedEventArgs
      {
            private object[] results;

            public AppendRecordCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                  object userState) :
                  base(exception, cancelled, userState)
            {
                  this.results = results;
            }

            public bool Result
            {
                  get
                  {
                        base.RaiseExceptionIfNecessary();
                        return ((bool) (this.results[0]));
                  }
            }
      }

      [DebuggerStepThrough()]
      [GeneratedCode("System.ServiceModel", "4.0.0.0")]
      public partial class ChallengeRecordsManagerClient : ClientBase<IChallengeRecordsManager>,
            IChallengeRecordsManager
      {
            private SendOrPostCallback onAppendRecordCompletedDelegate;

            private BeginOperationDelegate onBeginAppendRecordDelegate;

            private BeginOperationDelegate onBeginGetRecordsDelegate;

            private EndOperationDelegate onEndAppendRecordDelegate;

            private EndOperationDelegate onEndGetRecordsDelegate;

            private SendOrPostCallback onGetRecordsCompletedDelegate;

            public ChallengeRecordsManagerClient()
            {
            }

            public ChallengeRecordsManagerClient(string endpointConfigurationName) :
                  base(endpointConfigurationName)
            {
            }

            public ChallengeRecordsManagerClient(string endpointConfigurationName, string remoteAddress) :
                  base(endpointConfigurationName, remoteAddress)
            {
            }

            public ChallengeRecordsManagerClient(string endpointConfigurationName, EndpointAddress remoteAddress) :
                  base(endpointConfigurationName, remoteAddress)
            {
            }

            public ChallengeRecordsManagerClient(Binding binding, EndpointAddress remoteAddress) :
                  base(binding, remoteAddress)
            {
            }

            public RecordItem[] GetRecords()
            {
                  return base.Channel.GetRecords();
            }

            [EditorBrowsable(EditorBrowsableState.Advanced)]
            public IAsyncResult BeginGetRecords(AsyncCallback callback, object asyncState)
            {
                  return base.Channel.BeginGetRecords(callback, asyncState);
            }

            [EditorBrowsable(EditorBrowsableState.Advanced)]
            public RecordItem[] EndGetRecords(IAsyncResult result)
            {
                  return base.Channel.EndGetRecords(result);
            }

            public bool AppendRecord(string dataline)
            {
                  return base.Channel.AppendRecord(dataline);
            }

            [EditorBrowsable(EditorBrowsableState.Advanced)]
            public IAsyncResult BeginAppendRecord(string dataline, AsyncCallback callback, object asyncState)
            {
                  return base.Channel.BeginAppendRecord(dataline, callback, asyncState);
            }

            [EditorBrowsable(EditorBrowsableState.Advanced)]
            public bool EndAppendRecord(IAsyncResult result)
            {
                  return base.Channel.EndAppendRecord(result);
            }

            public event EventHandler<GetRecordsCompletedEventArgs> GetRecordsCompleted;

            public event EventHandler<AppendRecordCompletedEventArgs> AppendRecordCompleted;

            private IAsyncResult OnBeginGetRecords(object[] inValues, AsyncCallback callback, object asyncState)
            {
                  return this.BeginGetRecords(callback, asyncState);
            }

            private object[] OnEndGetRecords(IAsyncResult result)
            {
                  var retVal = this.EndGetRecords(result);
                  return new object[]
                  {
                        retVal
                  };
            }

            private void OnGetRecordsCompleted(object state)
            {
                  if ((this.GetRecordsCompleted != null))
                  {
                        var e = ((InvokeAsyncCompletedEventArgs) (state));
                        this.GetRecordsCompleted(this,
                              new GetRecordsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
                  }
            }

            public void GetRecordsAsync()
            {
                  this.GetRecordsAsync(null);
            }

            public void GetRecordsAsync(object userState)
            {
                  if ((this.onBeginGetRecordsDelegate == null))
                  {
                        this.onBeginGetRecordsDelegate = new BeginOperationDelegate(this.OnBeginGetRecords);
                  }
                  if ((this.onEndGetRecordsDelegate == null))
                  {
                        this.onEndGetRecordsDelegate = new EndOperationDelegate(this.OnEndGetRecords);
                  }
                  if ((this.onGetRecordsCompletedDelegate == null))
                  {
                        this.onGetRecordsCompletedDelegate = new SendOrPostCallback(this.OnGetRecordsCompleted);
                  }
                  base.InvokeAsync(this.onBeginGetRecordsDelegate, null, this.onEndGetRecordsDelegate,
                        this.onGetRecordsCompletedDelegate, userState);
            }

            private IAsyncResult OnBeginAppendRecord(object[] inValues, AsyncCallback callback, object asyncState)
            {
                  var dataline = ((string) (inValues[0]));
                  return this.BeginAppendRecord(dataline, callback, asyncState);
            }

            private object[] OnEndAppendRecord(IAsyncResult result)
            {
                  var retVal = this.EndAppendRecord(result);
                  return new object[]
                  {
                        retVal
                  };
            }

            private void OnAppendRecordCompleted(object state)
            {
                  if ((this.AppendRecordCompleted != null))
                  {
                        var e = ((InvokeAsyncCompletedEventArgs) (state));
                        this.AppendRecordCompleted(this,
                              new AppendRecordCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
                  }
            }

            public void AppendRecordAsync(string dataline)
            {
                  this.AppendRecordAsync(dataline, null);
            }

            public void AppendRecordAsync(string dataline, object userState)
            {
                  if ((this.onBeginAppendRecordDelegate == null))
                  {
                        this.onBeginAppendRecordDelegate = new BeginOperationDelegate(this.OnBeginAppendRecord);
                  }
                  if ((this.onEndAppendRecordDelegate == null))
                  {
                        this.onEndAppendRecordDelegate = new EndOperationDelegate(this.OnEndAppendRecord);
                  }
                  if ((this.onAppendRecordCompletedDelegate == null))
                  {
                        this.onAppendRecordCompletedDelegate = new SendOrPostCallback(this.OnAppendRecordCompleted);
                  }
                  base.InvokeAsync(this.onBeginAppendRecordDelegate, new object[]
                  {
                        dataline
                  }, this.onEndAppendRecordDelegate, this.onAppendRecordCompletedDelegate, userState);
            }
      }
}